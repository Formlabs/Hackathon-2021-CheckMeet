name: Publish

on:
  push:
    tags:
    - 'v*'

jobs:
  service:
    name: Publish Service binaries
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
        - os: macos-latest
          artifact_name: service/CheckMeet.dmg
          asset_name: CheckMeet-Mac-$tag.dmg
        - os: windows-latest
          artifact_name: service/dist/CheckMeet.exe
          asset_name: CheckMeet-Windows-$tag.exe
        - os: ubuntu-latest
          artifact_name: service/dist/CheckMeet
          asset_name: CheckMeet-Ubuntu-$tag

    steps:
    - uses: actions/checkout@v2

    - uses: actions/setup-python@v2
      with:
        python-version: 3.9

    - name: Import Mac codesign key
      if: ${{ matrix.os == 'macos-latest' }}
      uses: apple-actions/import-codesign-certs@v1
      with:
        p12-file-base64: ${{ secrets.MACOS_CERTIFICATE }}
        p12-password: ${{ secrets.MACOS_CERTIFICATE_PASSWORD }}

    - name: Install Python dependencies
      working-directory: ${{github.workspace}}/service
      run: |
        python -m pip install pipenv
        pipenv install --dev --skip-lock

    - name: Build Mac package
      if: ${{ matrix.os == 'macos-latest' }}
      working-directory: ${{github.workspace}}/service
      run: pipenv run ./build_dmg.sh

    - name: Build non-Mac package
      if: ${{ matrix.os != 'macos-latest' }}
      working-directory: ${{github.workspace}}/service
      run: pipenv run pyinstaller --clean --onefile --name CheckMeet --windowed launch_service.py

    - uses: svenstaro/upload-release-action@v2
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        file: ${{ matrix.artifact_name }}
        asset_name: ${{ matrix.asset_name }}
        tag: ${{ github.ref }}
        prerelease: true

  firmware:
    name: Publish Firmware binary
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - name: Cache pip
      uses: actions/cache@v2
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Cache PlatformIO
      uses: actions/cache@v2
      with:
        path: ~/.platformio
        key: ${{ runner.os }}-${{ hashFiles('**/lockfiles') }}

    - name: Set up Python
      uses: actions/setup-python@v2

    - name: Install PlatformIO
      run: |
        python -m pip install --upgrade pip
        pip install --upgrade platformio

    - name: Run PlatformIO
      working-directory: ${{github.workspace}}/firmware
      run: pio run

    - uses: svenstaro/upload-release-action@v2
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        file: firmware/.pio/build/nodemcu/firmware.bin
        asset_name: firmware-$tag.nodemcu.bin
        tag: ${{ github.ref }}
        prerelease: true
